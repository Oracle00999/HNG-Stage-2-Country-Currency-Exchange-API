const express = require("express");
const axios = require("axios");
const db = require("./config/db");
const { createCanvas } = require("canvas");
const fs = require("fs").promises;
const fsSync = require("fs");
const path = require("path");

require("dotenv").config();

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 3000;

// Auto-create tables on startup
async function initializeDatabase() {
  try {
    console.log("🔄 Initializing database tables...");
    const connection = await db.getConnection();

    await connection.execute(`
      CREATE TABLE IF NOT EXISTS countries (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        capital VARCHAR(255),
        region VARCHAR(255),
        population BIGINT NOT NULL,
        currency_code VARCHAR(10),
        exchange_rate DECIMAL(20, 6),
        estimated_gdp DECIMAL(30, 6),
        flag_url TEXT,
        last_refreshed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
      )
    `);

    console.log("✅ Countries table created/verified");

    const indexDefinitions = [
      { name: "idx_region", columns: "region" },
      { name: "idx_currency_code", columns: "currency_code" },
      { name: "idx_estimated_gdp", columns: "estimated_gdp" },
      { name: "idx_name", columns: "name" },
    ];

    for (const index of indexDefinitions) {
      const [existingIndexes] = await connection.query(
        `SHOW INDEX FROM countries WHERE Key_name = '${index.name}'`
      );
      if (existingIndexes.length === 0) {
        await connection.query(
          `CREATE INDEX ${index.name} ON countries(${index.columns})`
        );
        console.log(`✅ Index '${index.name}' created`);
      } else {
        console.log(`ℹ️ Index '${index.name}' already exists`);
      }
    }

    connection.release();
    console.log("✅ Database indexes created");
  } catch (error) {
    console.error("❌ Database initialization failed:", error.message);
  }
}

initializeDatabase();

let lastRefreshTimestamp = null;
const getRandomMultiplier = () => Math.floor(Math.random() * 1001) + 1000;

const ensureCacheDir = () => {
  const cacheDir = path.join(__dirname, "cache");
  if (!fsSync.existsSync(cacheDir)) {
    fsSync.mkdirSync(cacheDir, { recursive: true });
  }
  return cacheDir;
};

// 🖼️ Generate summary image
async function generateSummaryImage() {
  try {
    const cacheDir = ensureCacheDir();
    const imagePath = path.join(cacheDir, "summary.png");

    const [topCountries] = await db.execute(
      "SELECT name, estimated_gdp FROM countries WHERE estimated_gdp IS NOT NULL ORDER BY estimated_gdp DESC LIMIT 5"
    );

    const [[{ total_countries }]] = await db.execute(
      "SELECT COUNT(*) as total_countries FROM countries"
    );

    const [[{ last_refresh }]] = await db.execute(
      "SELECT MAX(last_refreshed_at) as last_refresh FROM countries"
    );

    const canvas = createCanvas(600, 400);
    const ctx = canvas.getContext("2d");

    ctx.fillStyle = "#ffffff";
    ctx.fillRect(0, 0, 600, 400);

    ctx.strokeStyle = "#333333";
    ctx.lineWidth = 2;
    ctx.strokeRect(10, 10, 580, 380);

    ctx.fillStyle = "#333333";
    ctx.font = "bold 20px Arial";
    ctx.fillText("COUNTRIES SUMMARY", 30, 40);

    ctx.font = "16px Arial";
    ctx.fillText(`Total Countries: ${total_countries}`, 30, 80);

    const refreshTime = last_refresh
      ? new Date(last_refresh).toLocaleString()
      : "Never";
    ctx.fillText(`Last Updated: ${refreshTime}`, 30, 110);

    ctx.beginPath();
    ctx.moveTo(30, 130);
    ctx.lineTo(570, 130);
    ctx.strokeStyle = "#cccccc";
    ctx.stroke();

    ctx.fillStyle = "#333333";
    ctx.font = "bold 16px Arial";
    ctx.fillText("Top 5 Countries by GDP:", 30, 160);

    ctx.font = "14px Arial";
    let yPos = 190;

    topCountries.forEach((country, index) => {
      const gdpFormatted = country.estimated_gdp
        ? `$${parseFloat(country.estimated_gdp).toLocaleString()}`
        : "N/A";

      ctx.fillText(`${index + 1}. ${country.name}`, 50, yPos);
      ctx.fillText(gdpFormatted, 400, yPos);
      yPos += 30;
    });

    ctx.font = "12px Arial";
    ctx.fillStyle = "#666666";
    ctx.fillText("Generated by Countries API", 30, 380);

    const buffer = canvas.toBuffer("image/png");
    await fs.writeFile(imagePath, buffer);

    console.log("✅ Summary image generated successfully at:", imagePath);
    return true;
  } catch (error) {
    console.error("❌ Image generation failed:", error);
    return false;
  }
}

// POST /countries/refresh - FIXED DUPLICATE ISSUE
app.post("/countries/refresh", async (req, res) => {
  const connection = await db.getConnection();

  try {
    console.log("🔄 Starting countries refresh...");

    // Updated REST Countries API (v3.1)
    const countriesResponse = await axios.get(
      "https://restcountries.com/v3.1/all?fields=name,capital,region,population,flags,currencies",
      { timeout: 20000 }
    );

    // Exchange rates (still fine)
    const exchangeResponse = await axios.get(
      "https://open.er-api.com/v6/latest/USD",
      { timeout: 20000 }
    );

    const countries = countriesResponse.data;
    const exchangeRates = exchangeResponse.data.rates;

    console.log(
      `📊 Fetched ${countries.length} countries and ${
        Object.keys(exchangeRates).length
      } exchange rates`
    );

    await connection.beginTransaction();

    console.log("🗑️ Clearing existing countries data...");
    await connection.execute("DELETE FROM countries");

    let inserted = 0;

    for (const c of countries) {
      const name = c.name?.common || "N/A";
      const capital = c.capital?.[0] || null;
      const region = c.region || null;
      const population = c.population || 0;
      const flag = c.flags?.png || c.flags?.svg || null;
      const currencyCode = c.currencies ? Object.keys(c.currencies)[0] : null;

      let exchangeRate = null;
      let estimatedGdp = null;

      if (currencyCode && exchangeRates[currencyCode]) {
        exchangeRate = exchangeRates[currencyCode];
        const randomMultiplier = getRandomMultiplier();
        estimatedGdp = (population * randomMultiplier) / exchangeRate;
      }

      await connection.execute(
        `INSERT INTO countries 
          (name, capital, region, population, currency_code, exchange_rate, estimated_gdp, flag_url)
          VALUES (?, ?, ?, ?, ?, ?, ?, ?)
          ON DUPLICATE KEY UPDATE
          capital = VALUES(capital),
          region = VALUES(region),
          population = VALUES(population),
          currency_code = VALUES(currency_code),
          exchange_rate = VALUES(exchange_rate),
          estimated_gdp = VALUES(estimated_gdp),
          flag_url = VALUES(flag_url),
          last_refreshed_at = NOW()`,
        [
          name,
          capital,
          region,
          population,
          currencyCode,
          exchangeRate,
          estimatedGdp,
          flag,
        ]
      );

      inserted++;
      if (inserted % 50 === 0) {
        console.log(`✅ Processed ${inserted}/${countries.length} countries`);
      }
    }

    await connection.commit();
    lastRefreshTimestamp = new Date().toISOString();

    console.log(`✅ Database updated: ${inserted} countries processed`);
    console.log("🖼️ Generating summary image...");
    const imageGenerated = await generateSummaryImage();

    res.json({
      message: "Countries data refreshed successfully",
      total_countries: inserted,
      image_generated: imageGenerated,
      last_refreshed_at: lastRefreshTimestamp,
    });
  } catch (error) {
    await connection.rollback();
    console.error("❌ Refresh error:", error.message);
    res.status(500).json({ error: "Failed to refresh data" });
  } finally {
    connection.release();
  }
});

// GET /countries/image
app.get("/countries/image", (req, res) => {
  try {
    const imagePath = path.join(__dirname, "cache", "summary.png");

    console.log("📁 Looking for image at:", imagePath);

    if (fsSync.existsSync(imagePath)) {
      console.log("✅ Image found, serving...");

      res.setHeader("Content-Type", "image/png");
      res.setHeader("Content-Disposition", 'inline; filename="summary.png"');

      const imageBuffer = fsSync.readFileSync(imagePath);
      res.send(imageBuffer);
    } else {
      console.log("❌ Image not found at:", imagePath);
      res.status(404).json({
        error: "Summary image not found",
        message:
          "Please run POST /countries/refresh first to generate the image",
      });
    }
  } catch (error) {
    console.error("❌ Image serving error:", error);
    res
      .status(500)
      .json({ error: "Internal server error while serving image" });
  }
});

// GET /countries
app.get("/countries", async (req, res) => {
  try {
    const { region, currency, sort } = req.query;

    let query = "SELECT * FROM countries WHERE 1=1";
    const params = [];

    if (region) {
      query += " AND region = ?";
      params.push(region);
    }

    if (currency) {
      query += " AND currency_code = ?";
      params.push(currency);
    }

    if (sort) {
      if (sort === "gdp_desc") {
        query += " ORDER BY estimated_gdp DESC";
      } else if (sort === "gdp_asc") {
        query += " ORDER BY estimated_gdp ASC";
      } else if (sort === "name_asc") {
        query += " ORDER BY name ASC";
      } else if (sort === "name_desc") {
        query += " ORDER BY name DESC";
      }
    }

    const [countries] = await db.execute(query, params);

    console.log(`📊 Returning ${countries.length} countries`);

    res.json(
      countries.map((country) => ({
        ...country,
        estimated_gdp: country.estimated_gdp
          ? parseFloat(country.estimated_gdp)
          : null,
        exchange_rate: country.exchange_rate
          ? parseFloat(country.exchange_rate)
          : null,
      }))
    );
  } catch (error) {
    console.error("Get countries error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// GET /status
app.get("/status", async (req, res) => {
  try {
    const [[{ total_countries }]] = await db.execute(
      "SELECT COUNT(*) as total_countries FROM countries"
    );

    const [[{ last_refresh }]] = await db.execute(
      "SELECT MAX(last_refreshed_at) as last_refresh FROM countries"
    );

    console.log(
      `📈 Status: ${total_countries} countries, last refresh: ${last_refresh}`
    );

    res.json({
      total_countries,
      last_refreshed_at: last_refresh || lastRefreshTimestamp,
    });
  } catch (error) {
    console.error("Status error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// GET /countries/:name
app.get("/countries/:name", async (req, res) => {
  try {
    const { name } = req.params;

    const [countries] = await db.execute(
      "SELECT * FROM countries WHERE name = ?",
      [name]
    );

    if (countries.length === 0) {
      return res.status(404).json({ error: "Country not found" });
    }

    const country = countries[0];
    res.json({
      ...country,
      estimated_gdp: country.estimated_gdp
        ? parseFloat(country.estimated_gdp)
        : null,
      exchange_rate: country.exchange_rate
        ? parseFloat(country.exchange_rate)
        : null,
    });
  } catch (error) {
    console.error("Get country error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

app.delete("/countries/:name", async (req, res) => {
  try {
    const { name } = req.params;

    const [result] = await db.execute("DELETE FROM countries WHERE name = ?", [
      name,
    ]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Country not found" });
    }

    res.json({ message: "Country deleted successfully" });
  } catch (error) {
    console.error("Delete country error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// Auto-refresh on startup (optional for production)
async function autoRefresh() {
  try {
    console.log("🔄 Auto-refreshing countries data on startup...");
    const response = await axios.post(
      `${
        process.env.APP_URL || "http://localhost:${PORT}"
      }${"/countries/refresh"}`
    );
    console.log("✅ Auto-refresh completed:", response.data);
  } catch (error) {
    console.error("❌ Auto-refresh failed:", error.message);
  }
}

// Call auto-refresh after server starts
// app.listen(PORT, async () => {
//   console.log(`🚀 Server running on port ${PORT}`);
//   ensureCacheDir();
//   console.log("✅ Cache directory ready");

//   // Only auto-refresh if not in development or if desired
//   if (process.env.NODE_ENV !== "development") {
//     await autoRefresh();
//   }
// });

// Initialize server
app.listen(PORT, async () => {
  console.log(`🚀 Server running on port ${PORT}`);
  ensureCacheDir();
  console.log("✅ Cache directory ready");

  // Wait 5 seconds to ensure everything is ready
  await new Promise((r) => setTimeout(r, 5000));

  // Only auto-refresh if not in development
  if (process.env.NODE_ENV !== "development") {
    await autoRefresh();
  }
});
